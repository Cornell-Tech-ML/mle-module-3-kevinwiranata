```
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map,
/content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (154)
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (154)
-------------------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                                                                        |
        out: Storage,                                                                                                                |
        out_shape: Shape,                                                                                                            |
        out_strides: Strides,                                                                                                        |
        in_storage: Storage,                                                                                                         |
        in_shape: Shape,                                                                                                             |
        in_strides: Strides,                                                                                                         |
    ) -> None:                                                                                                                       |
        if (np.array_equal(in_strides, out_strides) and np.array_equal(in_shape, out_shape) and len(in_shape) == len(out_shape)):    |
            for i in prange(len(out)):-----------------------------------------------------------------------------------------------| #0
                out[i] = fn(in_storage[i])                                                                                           |
        else:                                                                                                                        |
            for i in prange(len(out)):-----------------------------------------------------------------------------------------------| #1
                out_index = np.empty(len(out_shape), np.int32)                                                                       |
                in_index = np.empty(len(in_shape), np.int32)                                                                         |
                to_index(i, out_shape, out_index)                                                                                    |
                broadcast_index(out_index, out_shape, in_shape, in_index)                                                            |
                out[index_to_position(out_index, out_strides)] = fn(in_storage[index_to_position(in_index, in_strides)])             |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #0, #1).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (167) is hoisted out of the
parallel loop labelled #1 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: out_index = np.empty(len(out_shape), np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (168) is hoisted out of the
parallel loop labelled #1 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: in_index = np.empty(len(in_shape), np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip,
/content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (197)
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (197)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                                                                                                          |
        out: Storage,                                                                                                                                                  |
        out_shape: Shape,                                                                                                                                              |
        out_strides: Strides,                                                                                                                                          |
        a_storage: Storage,                                                                                                                                            |
        a_shape: Shape,                                                                                                                                                |
        a_strides: Strides,                                                                                                                                            |
        b_storage: Storage,                                                                                                                                            |
        b_shape: Shape,                                                                                                                                                |
        b_strides: Strides,                                                                                                                                            |
    ) -> None:                                                                                                                                                         |
        if (len(a_shape) == len(b_shape) and np.array_equal(a_strides, b_strides) and np.array_equal(a_shape, b_shape) and np.array_equal(b_strides, out_strides)):    |
            for i in prange(len(out)):---------------------------------------------------------------------------------------------------------------------------------| #2
                out[i] = fn(a_storage[i], b_storage[i])                                                                                                                |
        else:                                                                                                                                                          |
            for i in prange(len(out)):---------------------------------------------------------------------------------------------------------------------------------| #3
                a_index = np.empty(len(a_shape), np.int32)                                                                                                             |
                b_index = np.empty(len(b_shape), np.int32)                                                                                                             |
                out_index = np.empty(len(out_shape), np.int32)                                                                                                         |
                to_index(i, out_shape, out_index)                                                                                                                      |
                broadcast_index(out_index, out_shape, a_shape, a_index)                                                                                                |
                broadcast_index(out_index, out_shape, b_shape, b_index)                                                                                                |
                a_pos = index_to_position(a_index, a_strides)                                                                                                          |
                b_pos = index_to_position(b_index, b_strides)                                                                                                          |
                out_pos = index_to_position(out_index, out_strides)                                                                                                    |
                out[out_pos] = fn(a_storage[a_pos], b_storage[b_pos])                                                                                                  |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #2, #3).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (213) is hoisted out of the
parallel loop labelled #3 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: a_index = np.empty(len(a_shape), np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (214) is hoisted out of the
parallel loop labelled #3 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: b_index = np.empty(len(b_shape), np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (215) is hoisted out of the
parallel loop labelled #3 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: out_index = np.empty(len(out_shape), np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE

================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce,
/content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (245)
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (245)
-----------------------------------------------------------------------------|loop #ID
    def _reduce(                                                             |
        out: Storage,                                                        |
        out_shape: Shape,                                                    |
        out_strides: Strides,                                                |
        a_storage: Storage,                                                  |
        a_shape: Shape,                                                      |
        a_strides: Strides,                                                  |
        reduce_dim: int,                                                     |
    ) -> None:                                                               |
        # loop through everything fisrt                                      |
        for i in prange(len(out)):-------------------------------------------| #5
            out_index: Index = np.zeros(MAX_DIMS, np.int32)------------------| #4
            a_index = out_index                                              |
            to_index(i, out_shape, out_index)                                |
            out_pos = index_to_position(out_index, out_strides)              |
            # loop through dimension to reduce and do the function thingy    |
            for j in range(a_shape[reduce_dim]):                             |
                a_index[reduce_dim] = j                                      |
                a_pos = index_to_position(a_index, a_strides)                |
                out[out_pos] = fn(out[out_pos], a_storage[a_pos])            |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #5, #4).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--5 is a parallel loop
   +--4 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--5 (parallel)
   +--4 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--5 (parallel)
   +--4 (serial)



Parallel region 0 (loop #5) had 0 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#5).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at /content/mle-
module-3-kevinwiranata/minitorch/fast_ops.py (256) is hoisted out of the
parallel loop labelled #5 (it will be performed before the loop is executed and
reused inside the loop):
   Allocation:: out_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY

================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply,
/content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (269)
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /content/mle-module-3-kevinwiranata/minitorch/fast_ops.py (269)
------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                              |
    out: Storage,                                                                         |
    out_shape: Shape,                                                                     |
    out_strides: Strides,                                                                 |
    a_storage: Storage,                                                                   |
    a_shape: Shape,                                                                       |
    a_strides: Strides,                                                                   |
    b_storage: Storage,                                                                   |
    b_shape: Shape,                                                                       |
    b_strides: Strides,                                                                   |
) -> None:                                                                                |
    """                                                                                   |
    NUMBA tensor matrix multiply function.                                                |
                                                                                          |
    Should work for any tensor shapes that broadcast as long as                           |
                                                                                          |
    ```                                                                                   |
    assert a_shape[-1] == b_shape[-2]                                                     |
    ```                                                                                   |
                                                                                          |
    Optimizations:                                                                        |
                                                                                          |
    * Outer loop in parallel                                                              |
    * No index buffers or function calls                                                  |
    * Inner loop should have no global writes, 1 multiply.                                |
                                                                                          |
                                                                                          |
    Args:                                                                                 |
        out (Storage): storage for `out` tensor                                           |
        out_shape (Shape): shape for `out` tensor                                         |
        out_strides (Strides): strides for `out` tensor                                   |
        a_storage (Storage): storage for `a` tensor                                       |
        a_shape (Shape): shape for `a` tensor                                             |
        a_strides (Strides): strides for `a` tensor                                       |
        b_storage (Storage): storage for `b` tensor                                       |
        b_shape (Shape): shape for `b` tensor                                             |
        b_strides (Strides): strides for `b` tensor                                       |
                                                                                          |
    Returns:                                                                              |
        None : Fills in `out`                                                             |
    """                                                                                   |
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                |
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                |
                                                                                          |
    for x in prange(out_shape[0]):--------------------------------------------------------| #8
        for y in prange(out_shape[1]):----------------------------------------------------| #7
            for z in prange(out_shape[2]):------------------------------------------------| #6
                res = 0.0                                                                 |
                posA = x * a_batch_stride + y * a_strides[1]                              |
                posB = x * b_batch_stride + z * b_strides[2]                              |
                for _ in range(b_shape[1]):  # b_shape[1] == a_shape[2]                   |
                    res += a_storage[posA] * b_storage[posB]  # dot product               |
                    posA += a_strides[2]  # col                                           |
                    posB += b_strides[1]  # row                                           |
                out_pos = x * out_strides[0] + y * out_strides[1] + z * out_strides[2]    |
                out[out_pos] = res                                                        |
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #8, #7).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...

+--8 is a parallel loop
   +--7 --> rewritten as a serial loop
      +--6 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--7 (parallel)
      +--6 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--7 (serial)
      +--6 (serial)



Parallel region 0 (loop #8) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#8).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
```